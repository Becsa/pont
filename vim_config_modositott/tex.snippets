global !p
# texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

snippet template "Basic template" b
\documentclass[12pt,a4paper]{article}
\input{media/sf_megosztott/preambulum/preamble/preamble}
\author{Breznay Csaba (\texttt{FSRHNC})}
\title{Hidraulikus munkahenger tervezési dokumentáció}
\date{}
%cimlap
\makeatletter
\def\@maketitle{
	\begin{figure}[!tbp]
	\caption*{}
	\begin{subfigure}[b]{0.6\textwidth}
		\caption*{}
		\includegraphics[width=\textwidth]{bme_logo_nagy.jpg}
	\end{subfigure}
	\hfill
	\begin{subfigure}[b]{0.3\textwidth}
		\caption*{}
		\includegraphics[width=\textwidth]{bme_gt3_logo.png}
	\end{subfigure}
\end{figure}
	\begin{center}
		{\Huge \bfseries \sffamily \@title }\\[4ex]
		{\Large  \@author}\\[4ex]
		\@date\\[2ex]
	\end{center}
\begin{center}
	%\includegraphics[width=0.7\textwidth]{figures/.png}
\end{center}
\vspace{15mm}
\noindent
\\Gyakorlatvezető: \\
\vspace{10mm}

\noindent
............................................................\newline
Aláírás
\setcounter{figure}{0}
\setcounter{subfigure}{0}
}
\fancyfoot[L]{Breznay Csaba, FSRHNC}
\pagestyle{fancy}
\renewcommand{\vec}[1]{\underline{#1}}
\bibliography{/media/sf_megosztott/preambulum/bibliography/biblio.bib}
\begin{document}
\maketitle
\thispagestyle{empty}
\newpage
%\includepdf[pages=1]{figures/.pdf}
\newpage
\setcounter{tocdepth}{3}
\tableofcontents
\thispagestyle{empty}
%\listoffigures
\clearpage
\pagenumbering{arabic}
\addtocontents{toc}{\protect\setcounter{tocdepth}{3}}
	$0
\end{document}
endsnippet

#snippet tetel "tétel" bA
#\begin{theorem}{$1}
#\fbox{$2}
#\end{theorem}
#endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=1\textwidth]{$3}}
	\caption{${4:}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

#context "math()"
#snippet '([A-Za-z])(\d)' "auto subscript" wrA
#`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
#endsnippet

#context "math()"
#snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
#`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
#endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

snippet vmat "vmat" iA
\begin{vmatrix} $1 \end{vmatrix} $0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet dint "integral" w
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet


# snippet sum "sum" w
# \sum_{n=${1:0}}^{${3:\infty}} ${4:${VISUAL}} $0
# endsnippet

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

# snippet rij "mrij" i
# (${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
# endsnippet

snippet <= "leq" iA
\le
endsnippet

snippet >= "geq" iA
\ge
endsnippet

# context "math()"
# snippet xii "xi" iA
# x_{i}
# endsnippet

# context "math()"
# snippet yii "yi" iA
# y_{i}
# endsnippet

# context "math()"
# snippet xjj "xj" iA
# x_{j}
# endsnippet

# context "math()"
# snippet yjj "yj" iA
# y_{j}
# endsnippet

# context "math()"
# snippet xmm "x" iA
# x_{m}
# endsnippet

# snippet R0+ "R0+" iA
# \\R_0^+
# endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet xx "cross" iA
\times
endsnippet

priority 100
snippet * "cdot" iA
\cdot
endsnippet

#priority 200
#snippet '\cdot *' "cdot" iA
#*
#endsnippet
priority 200
snippet \cdot\cdot "cdot" i
*
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|tan|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

#priority 100
#context "math()"
#snippet -> "to" iA
#\to
#endsnippet

priority 300
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

priority 300
context "math()"
snippet --> "rightarrow" iA
\longrightarrow
endsnippet

priority 300
context "math()"
snippet <-- "leftarrow" iA
\longleftarrow
endsnippet

priority 200
context "math()"
snippet -> "rightarrow" iA
\rightarrow
endsnippet

priority 200
context "math()"
snippet <- "leftarrow" iA
\leftarrow
endsnippet

# context "math()"
# snippet !> "mapsto" iA
# \mapsto
# endsnippet

# context "math()"
# snippet invs "inverse" iA
# ^{-1}
# endsnippet

# context "math()"
# snippet compl "complement" iA
# ^{c}
# endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet

context "math()"
snippet D' "delta" iA
\Delta
endsnippet

context "math()"
snippet n' "eta" iA
\eta
endsnippet

context "math()"
snippet r' "rho" iA
\varrho
endsnippet

context "math()"
snippet s' "sigma" iA
\sigma
endsnippet

context "math()"
snippet t' "tau" iA
\tau
endsnippet

context "math()"
snippet T' "theta" iA
\theta
endsnippet

context "math()"
snippet l' "lambda" iA
\lambda
endsnippet

context "math()"
snippet a' "alfa" iA
\alpha
endsnippet

context "math()"
snippet d' "kisdelta" iA
\delta
endsnippet

context "math()"
snippet b' "beta" iA
\beta
endsnippet

context "math()"
snippet c' "gamma" iA
\gamma
endsnippet

context "math()"
snippet w' "kisomega" iA
\omega
endsnippet

context "math()"
snippet x' "xi" iA
\xi
endsnippet

context "math()"
snippet e' "epsilon" iA
\varepsilon
endsnippet

snippet z' "zeta" wA
\zeta
endsnippet

snippet f' "fi" wA
\varphi
endsnippet

snippet ~~ "~" iA
\sim
endsnippet

snippet ~= "~" iA
\approxeq
endsnippet

priority 100
context "math()"
snippet pont "pont" iA
\dot{$0}
endsnippet

priority 600
context "math()"
snippet ppont "ketpont" iA
\ddot{$0}
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

#snippet NN "n" iA
#\N
#endsnippet

snippet ZZ "Z" iA
\mathbb{Z}
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" wA
\text{$1}$0
endsnippet

context "math()"
snippet mrtk "mertekegyseg" iA
~\mathrm{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

context "math()"
snippet rcase "rcases" wA
\begin{rcases}
	$1
\end{rcases}
endsnippet

# snippet bigfun "Big function" iA
# \begin{align*}
# 	$1: $2 &\longrightarrow $3 \\\\
# 	$4 &\longmapsto $1($4) = $0
# .\end{align*}
# endsnippet

# snippet cvec "column vector" iA
# \begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
# endsnippet
snippet cvec "column vector" iA
\begin{bmatrix} $1\\\\ $2\\\\ $3 \end{bmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 10
context "math()"
snippet "vec" "vec" riA
\vec{$1}$0
endsnippet

priority 10
context "math()"
snippet "mat" "vec" riA
\matrix{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])vec" "vec" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])mat" "matrix" riA
\matrix{`!p snip.rv=match.group(1)`}
endsnippet

priority 400
context "math()"
snippet "([a-zA-Z])pont" "pont" riA
\dot{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

# vim:ft=snippets
